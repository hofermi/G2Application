version: "3.2"
services:
  mariadb:
    image: mariadb:10.5.9
    container_name: g2_mariadb
    restart: always
    ports:
      - 3306:3306
    volumes:
      - ~/docker/volumes/mariadb:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: "g2-prototype-pw"

  zookeeper:
    image: bitnami/zookeeper:3.7.0
    container_name: g2_zookeeper
    restart: always
    ports:
      - 2181:2181
    volumes:
      - ~/docker/volumes/zookeeper:/bitnami/zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 20s
      # zookeeper has a session expiry time of 18000ms. It needs this time to declare the old session dead. If the Kafka broker is brought up before this happens, the broker shuts down with "Error while creating ephemeral at /broker/ids/1, node already exists"

  kafka-0:
    image: bitnami/kafka:2.8.0
    container_name: g2_kafka-0
    restart: always
    ports:
      - 9092:9092
    volumes:
      - ~/docker/volumes/kafka/kafka-0:/bitnami/kafka
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENERS: >-
        INTERNAL://:29092,EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: >-
        INTERNAL://kafka-0:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: >-
        INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
    depends_on:
      zookeeper:
        condition: service_healthy

  kafka-1:
    image: bitnami/kafka:2.8.0
    container_name: g2_kafka-1
    restart: always
    ports:
      - 9093:9093
    volumes:
      - ~/docker/volumes/kafka/kafka-1:/bitnami/kafka
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENERS: >-
        INTERNAL://:29092,EXTERNAL://:9093
      KAFKA_ADVERTISED_LISTENERS: >-
        INTERNAL://kafka-1:29092,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: >-
        INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
    depends_on:
      zookeeper:
        condition: service_healthy

  kafka-2:
    image: bitnami/kafka:2.8.0
    container_name: g2_kafka-2
    restart: always
    ports:
      - 9094:9094
    volumes:
      - ~/docker/volumes/kafka/kafka-2:/bitnami/kafka
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENERS: >-
        INTERNAL://:29092,EXTERNAL://:9094
      KAFKA_ADVERTISED_LISTENERS: >-
        INTERNAL://kafka-2:29092,EXTERNAL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: >-
        INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
    depends_on:
      zookeeper:
        condition: service_healthy

  schema-registry:
    image: confluentinc/cp-schema-registry:5.4.0
    hostname: schema-registry
    container_name: g2_schema-registry
    depends_on:
      - zookeeper
      - kafka-0
      - kafka-1
      - kafka-2
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: >-
        kafka-0:29092,kafka-1:29092,kafka-2:29092

  kowl:
    image: quay.io/cloudhut/kowl:v1.3.1
    container_name: g2_kowl
    restart: always
    ports:
      - 9000:8080
    environment:
      KAFKA_BROKERS: >-
        kafka-0:29092,kafka-1:29092,kafka-2:29092
      KAFKA_SCHEMAREGISTRY_URLS: "http://schema-registry:8081"
    depends_on:
      - zookeeper
      - kafka-0
      - kafka-1
      - kafka-2
      - schema-registry

#  kafdrop:
#    image: obsidiandynamics/kafdrop:3.28.0-SNAPSHOT
#    container_name: g2_kafdrop
#    restart: always
#    ports:
#      - 9000:9000
#    environment:
#      KAFKA_BROKERCONNECT: >-
#        kafka-0:29092,kafka-1:29092,kafka-2:29092
#    depends_on:
#      - kafka-0
#      - kafka-1
#      - kafka-2
#      - schema-registry

# NOT FREE TO USE
#  control-center:
#    image: confluentinc/cp-enterprise-control-center:5.4.0
#    hostname: control-center
#    container_name: g2_control-center
#    depends_on:
#      - zookeeper
#      - kafka-0
#      - kafka-1
#      - kafka-2
#      - schema-registry
#    ports:
#      - "9021:9021"
#    environment:
#      CONTROL_CENTER_BOOTSTRAP_SERVERS: >-
#        kafka-0:29092,kafka-1:29092,kafka-2:29092
#      CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper:2181
#      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
#      CONTROL_CENTER_REPLICATION_FACTOR: 1
#      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
#      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
#      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
#      PORT: 9021
