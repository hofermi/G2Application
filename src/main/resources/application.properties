# persistence
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.jdbc.batch_size=100
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
# this is needed for ordering inserts in case of relationships
spring.jpa.properties.hibernate.order_inserts=true

spring.datasource.initialization-mode=always
spring.datasource.platform=mariadb
spring.datasource.url=jdbc:mariadb://localhost:3306/batchtest
spring.datasource.username=root
spring.datasource.password=g2-prototype-pw
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver

#Hibernate Configuration
# Show or not log for each sql query
spring.jpa.show-sql=false

spring.jpa.properties.hibernate.generate_statistics=true

logging.level.ROOT=INFO
logging.level.org.hibernate.engine.transaction.internal.TransactionImpl=INFO
logging.level.org.springframework.orm.jpa=INFO
logging.level.org.springframework.transaction=INFO


# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDB103Dialect


spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5

# kafka
kafka.bootstrapAddress=localhost:29092,localhost:29093,localhost:29094
kafka.schemaRegistry.url=http://localhost:8081

# kafka topics
kafka.topic.g2Booking.name=g2-booking
kafka.topic.g2Booking.schema=src/main/resources/avro/g2booking-schema.avsc
kafka.topic.g2Booking.noOfPartitions=4
kafka.topic.g2Booking.replicationFactor=3
kafka.topic.g2Booking.consumer.groupId=g2booking-consumerGroup

# kafka ksql
#kafka.ksql.server.host=localhost
#kafka.ksql.server.port=8082
