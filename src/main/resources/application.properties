# persistence
spring.jpa.hibernate.ddl-auto=none
spring.datasource.initialization-mode=always
spring.datasource.platform=mariadb
spring.datasource.url=jdbc:mariadb://localhost:3306
spring.datasource.username=root
spring.datasource.password=g2-prototype-pw
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# kafka
kafka.bootstrapAddress=localhost:29092,localhost:29093,localhost:29094
kafka.schemaRegistry.url=http://localhost:8081

# kafka topics
kafka.topic.g2Booking.name=g2-booking
kafka.topic.g2Booking.schema=src/main/resources/avro/g2booking-schema.avsc
#kafka.topic.g2Booking.noOfPartitions=1
#kafka.topic.g2Booking.replicationFactor=1
kafka.topic.g2Booking.noOfPartitions=4
kafka.topic.g2Booking.replicationFactor=3
kafka.topic.g2Booking.consumer.groupId=g2booking-consumerGroup

# kafka streams
kafka.stream.store.g2BookingsCounter=G2BookingsCounterStore
# kafka ksql
#kafka.ksql.server.host=localhost
#kafka.ksql.server.port=8082

# spring cloud kafka streams
# needed? used by:
# HostInfo hostInfo = interactiveQueryService.getCurrentHostInfo(); // HostInfo{host='localhost', port=29092}
#spring.cloud.stream.kafka.streams.binder.configuration.application.server=localhost:8080
spring.cloud.stream.kafka.binder.brokers=localhost:29092,localhost:29093,localhost:29094
spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms=1000
spring.cloud.stream.kafka.streams.binder.configuration.default.timestamp.extractor=org.apache.kafka.streams.processor.FailOnInvalidTimestamp
spring.kafka.properties.schema.registry.url=http://localhost:8081

spring.cloud.stream.bindings.newG2BookingStream-in-0.destination=g2-booking
spring.cloud.stream.kafka.streams.bindings.newG2BookingStream-in-0.consumer.keySerde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.bindings.newG2BookingStream-in-0.consumer.valueSerde=io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
spring.cloud.stream.kafka.streams.bindings.newG2BookingStream-in-0.consumer.materializedAs=newG2BookingsCounterStore
#spring.cloud.stream.kafka.streams.bindings.newG2BookingStream-in-0.consumer.configuration.num.stream.threads=1
#spring.cloud.stream.kafka.streams.bindings.newG2BookingStream-in-0.consumer.configuration.replication.factor=1
#spring.cloud.stream.kafka.streams.bindings.newG2BookingStream-in-0.consumer.num.stream.threads=1
#spring.cloud.stream.kafka.streams.bindings.newG2BookingStream-in-0.consumer.replication.factor=1
